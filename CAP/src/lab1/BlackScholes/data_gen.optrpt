Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.7.0 Build 20220726_000000

Compiler options: -I./ -O2 -g -qopt-report=3 -D__DO_FLOAT__ -xAVX -imf-precisionlow -imf-domain-exclusion31 -D_VML_ACCURACY_EP_ -mkl -o black-scholes

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: RandFloat(tfloat, tfloat)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (RandFloat(tfloat, tfloat)) data_gen.c(37,1)

===========================================================================

Begin optimization report for: FreeData(tfloat *, tfloat *, tfloat *, tfloat *, tfloat *, tfloat *, tfloat *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FreeData(tfloat *, tfloat *, tfloat *, tfloat *, tfloat *, tfloat *, tfloat *)) [2] data_gen.c(112,1)
  -> EXTERN: (114,5) _mm_free(void *)
  -> EXTERN: (115,5) _mm_free(void *)
  -> EXTERN: (116,5) _mm_free(void *)
  -> EXTERN: (117,5) _mm_free(void *)
  -> EXTERN: (118,5) _mm_free(void *)
  -> EXTERN: (119,5) _mm_free(void *)
  -> EXTERN: (120,5) _mm_free(void *)


    Report from: Code generation optimizations [cg]

data_gen.c(112,1):remark #34051: REGISTER ALLOCATION : [FreeData] data_gen.c:112

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rdx rcx rbx rbp rsi rdi r8-r9 r12 r14-r15]
        
    Routine temporaries
        Total         :      26
            Global    :      11
            Local     :      15
        Regenerable   :       2
        Spilled       :       5
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: InitData(int, tfloat **, tfloat **, tfloat **, tfloat **, tfloat **, tfloat **, tfloat **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (InitData(int, tfloat **, tfloat **, tfloat **, tfloat **, tfloat **, tfloat **, tfloat **)) [3] data_gen.c(58,1)
  -> EXTERN: (63,32) _mm_malloc(size_t, size_t)
  -> EXTERN: (64,32) _mm_malloc(size_t, size_t)
  -> EXTERN: (65,32) _mm_malloc(size_t, size_t)
  -> EXTERN: (66,32) _mm_malloc(size_t, size_t)
  -> EXTERN: (67,32) _mm_malloc(size_t, size_t)
  -> EXTERN: (68,32) _mm_malloc(size_t, size_t)
  -> EXTERN: (69,32) _mm_malloc(size_t, size_t)
  -> EXTERN: (75,9) printf(const char *__restrict__, ...)
  -> EXTERN: (76,9) exit(int)
  -> EXTERN: (79,5) srand(unsigned int)
  -> INLINE: (87,22) RandFloat(tfloat, tfloat)
    -> EXTERN: (38,12) rand(void)
  -> INLINE: (88,22) RandFloat(tfloat, tfloat)
    -> EXTERN: (38,12) rand(void)
  -> INLINE: (89,22) RandFloat(tfloat, tfloat)
    -> EXTERN: (38,12) rand(void)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at data_gen.c(84,5)
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 7 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 340 
   remark #15477: vector cost: 315.000 
   remark #15478: estimated potential speedup: 1.070 
   remark #15485: serialized function calls: 3
   remark #15487: type converts: 3 
   remark #15488: --- end vector cost summary ---
   remark #15489: --- begin vector function matching report ---
   remark #15490: Function call: rand(void) with simdlen=8, actual parameter types: (void)   [ data_gen.c(38,12) ]
   remark #26037: Library function call   [ data_gen.c(38,12) ]
   remark #15490: Function call: rand(void) with simdlen=8, actual parameter types: (void)   [ data_gen.c(38,12) ]
   remark #26037: Library function call   [ data_gen.c(38,12) ]
   remark #15490: Function call: rand(void) with simdlen=8, actual parameter types: (void)   [ data_gen.c(38,12) ]
   remark #26037: Library function call   [ data_gen.c(38,12) ]
   remark #15493: --- end vector function matching report ---
LOOP END

LOOP BEGIN at data_gen.c(84,5)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

data_gen.c(58,1):remark #34051: REGISTER ALLOCATION : [InitData] data_gen.c:58

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   28[ rax rdx rcx rbx rsi rdi r8-r9 r12-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     187
            Global    :     106
            Local     :      81
        Regenerable   :      23
        Spilled       :      31
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     304 bytes*
            Reads     :      38 [1.24e+01 ~ 12.4%]
            Writes    :      27 [7.88e+00 ~ 7.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
