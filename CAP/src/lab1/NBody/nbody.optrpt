Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.5.0 Build 20211109_000000

Compiler options: -I. -c -o nbody.o -O2 -g -qopt-report=3 -xhost

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: main(const int, const char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(const int, const char **)) [1] nbody.c(25,45)
  -> INLINE (MANUAL): (28,26) atoi(const char *)
    -> EXTERN: /usr/include/stdlib.h:(364,16) strtol(const char *__restrict__, char **__restrict__, int)
  -> EXTERN: (33,12) get_memory(int)
  -> EXTERN: (35,2) randomizeBodies(body *, int)
  -> EXTERN: (37,14) get_time()
  -> EXTERN: (40,3) bodyForce(body *, float, int)
  -> EXTERN: (41,3) integrate(body *, float, int)
  -> EXTERN: (44,21) get_time()
  -> INLINE: (45,18) solutionPos(body *, int)
  -> EXTERN: (46,2) printf(const char *__restrict__, ...)
  -> EXTERN: (47,2) printf(const char *__restrict__, ...)
  -> EXTERN: (49,2) free_memory(body *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody.c(17,2) inlined into nbody.c(45,18)
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 6 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 60 
   remark #15477: vector cost: 5.750 
   remark #15478: estimated potential speedup: 7.490 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at nbody.c(17,2) inlined into nbody.c(45,18)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 6 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 60 
   remark #15477: vector cost: 5.750 
   remark #15478: estimated potential speedup: 7.490 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at nbody.c(17,2) inlined into nbody.c(45,18)
<Remainder loop for vectorization>
LOOP END


Non-optimizable loops:


LOOP BEGIN at nbody.c(39,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

nbody.c(25,45):remark #34051: REGISTER ALLOCATION : [main] nbody.c:25

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   28[ rax rdx rcx rbx rsi rdi r8-r11 r14-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     144
            Global    :      41
            Local     :     103
        Regenerable   :      18
        Spilled       :       5
        
    Routine stack
        Variables     :       4 bytes*
            Reads     :       2 [1.23e-01 ~ 0.1%]
            Writes    :       2 [1.23e-01 ~ 0.1%]
        Spills        :      16 bytes*
            Reads     :       2 [1.23e-01 ~ 0.1%]
            Writes    :       2 [1.23e-01 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: atoi(const char *)

    Report from: Interprocedural optimizations [ipo]

NEVER EMIT DEFINITION FUNCTION: (atoi(const char *))/usr/include/stdlib.h(363,1)

===========================================================================

Begin optimization report for: solutionPos(body *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (solutionPos(body *, int)) [3] nbody.c(12,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody.c(17,2)
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 6 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 60 
   remark #15477: vector cost: 5.750 
   remark #15478: estimated potential speedup: 7.490 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at nbody.c(17,2)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 6 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 60 
   remark #15477: vector cost: 5.750 
   remark #15478: estimated potential speedup: 7.490 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at nbody.c(17,2)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

nbody.c(12,1):remark #34051: REGISTER ALLOCATION : [solutionPos] nbody.c:12

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   26[ rax rdx rcx rbx rsi rdi r8-r11 zmm0-zmm15]
        
    Routine temporaries
        Total         :     101
            Global    :      30
            Local     :      71
        Regenerable   :       3
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
