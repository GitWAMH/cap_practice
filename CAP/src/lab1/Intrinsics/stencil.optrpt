Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.7.0 Build 20220726_000000

Compiler options: -I. -O2 -qopt-report=3 -c -o stencil.o

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: ApplyStencil(unsigned char *, unsigned char *, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ApplyStencil(unsigned char *, unsigned char *, int, int)) [1] stencil.c(5,89)
  -> EXTERN: (25,19) _mm256_adds_epu8(union __m256i, union __m256i)
  -> EXTERN: (25,40) _mm256_adds_epu8(union __m256i, union __m256i)
  -> EXTERN: (25,61) _mm256_adds_epu8(union __m256i, union __m256i)
  -> EXTERN: (25,82) _mm256_adds_epu8(union __m256i, union __m256i)
  -> EXTERN: (25,103) _mm256_adds_epu8(union __m256i, union __m256i)
  -> EXTERN: (25,124) _mm256_adds_epu8(union __m256i, union __m256i)
  -> EXTERN: (29,10) _mm256_subs_epu8(union __m256i, union __m256i)
  -> EXTERN: (30,10) _mm256_subs_epu8(union __m256i, union __m256i)
  -> EXTERN: (31,10) _mm256_subs_epu8(union __m256i, union __m256i)
  -> EXTERN: (33,10) _mm256_subs_epu8(union __m256i, union __m256i)
  -> EXTERN: (34,10) _mm256_adds_epu8(union __m256i, union __m256i)
  -> EXTERN: (35,10) _mm256_subs_epu8(union __m256i, union __m256i)
  -> EXTERN: (37,10) _mm256_subs_epu8(union __m256i, union __m256i)
  -> EXTERN: (38,10) _mm256_subs_epu8(union __m256i, union __m256i)
  -> EXTERN: (39,10) _mm256_subs_epu8(union __m256i, union __m256i)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at stencil.c(9,2)
   remark #25101: Loop Interchange not done due to: Original Order seems proper
   remark #25452: Original Order found to be proper, but by a close margin
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at stencil.c(11,3)
   <Peeled>
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between img_in[i*width+j] (18:17) and img_out[i*width+j] (41:4)
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

stencil.c(5,89):remark #34051: REGISTER ALLOCATION : [ApplyStencil] stencil.c:5

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :      48
            Global    :      21
            Local     :      27
        Regenerable   :       1
        Spilled       :       5
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      40 bytes*
            Reads     :       5 [7.28e-01 ~ 0.7%]
            Writes    :       5 [7.28e-01 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: CopyImage(unsigned char *, unsigned char *, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (CopyImage(unsigned char *, unsigned char *, int, int)) [2] stencil.c(46,86)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at stencil.c(47,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stencil.c(49,3)
   <Peeled loop for vectorization>
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
      remark #25015: Estimate of max trip count of loop=15
   LOOP END

   LOOP BEGIN at stencil.c(49,3)
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 0.430 
      remark #15478: estimated potential speedup: 5.490 
      remark #15488: --- end vector cost summary ---
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   LOOP END

   LOOP BEGIN at stencil.c(49,3)
   <Alternate Alignment Vectorized Loop>
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   LOOP END

   LOOP BEGIN at stencil.c(49,3)
   <Remainder loop for vectorization>
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

stencil.c(46,86):remark #34051: REGISTER ALLOCATION : [CopyImage] stencil.c:46

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      44
            Global    :      24
            Local     :      20
        Regenerable   :       0
        Spilled       :       6
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       6 [1.16e+00 ~ 1.2%]
            Writes    :       6 [1.16e+00 ~ 1.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
