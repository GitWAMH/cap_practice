Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.5.0 Build 20211109_000000

Compiler options: -I. -O2 -qopt-report=5 -c -o stencil.o

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: ApplyStencil(unsigned char *, unsigned char *, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ApplyStencil(unsigned char *, unsigned char *, int, int)) [1/2=50.0%] stencil.c(3,89)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at stencil.c(8,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stencil.c(11,3)
      remark #15388: vectorization support: reference img_in[i*width+j] has aligned access   [ stencil.c(12,10) ]
      remark #15388: vectorization support: reference img_in[(i-1)*width+j] has aligned access   [ stencil.c(13,42) ]
      remark #15388: vectorization support: reference img_in[(i-1)*width+j-1] has aligned access   [ stencil.c(13,12) ]
      remark #15388: vectorization support: reference img_in[(i-1)*width+j+1] has aligned access   [ stencil.c(13,68) ]
      remark #15388: vectorization support: reference img_in[i*width+j-1] has aligned access   [ stencil.c(14,7) ]
      remark #15388: vectorization support: reference img_in[i*width+j] has aligned access   [ stencil.c(14,37) ]
      remark #15388: vectorization support: reference img_in[i*width+j+1] has aligned access   [ stencil.c(14,63) ]
      remark #15388: vectorization support: reference img_in[(i+1)*width+j-1] has aligned access   [ stencil.c(15,7) ]
      remark #15388: vectorization support: reference img_in[(i+1)*width+j] has aligned access   [ stencil.c(15,37) ]
      remark #15388: vectorization support: reference img_in[(i+1)*width+j+1] has aligned access   [ stencil.c(15,63) ]
      remark #15388: vectorization support: reference img_out[i*width+j] has aligned access   [ stencil.c(23,4) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.458
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 10 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 71 
      remark #15477: vector cost: 9.000 
      remark #15478: estimated potential speedup: 7.140 
      remark #15487: type converts: 11 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at stencil.c(11,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

stencil.c(14,37):remark #34055: adjacent dense (unit-strided stencil) loads are not optimized. Details: stride { 1 }, step { 1 }, types { I8-V64, I8-V64, I8-V64 }, number of elements { 8 }, select mask { 0x000000007 }.
stencil.c(14,37):remark #34055: adjacent dense (unit-strided stencil) loads are not optimized. Details: stride { 1 }, step { 1 }, types { I8-V64, I8-V64, I8-V64 }, number of elements { 8 }, select mask { 0x000000007 }.
stencil.c(14,37):remark #34055: adjacent dense (unit-strided stencil) loads are not optimized. Details: stride { 1 }, step { 1 }, types { I8-V64, I8-V64, I8-V64 }, number of elements { 8 }, select mask { 0x000000007 }.
stencil.c(3,89):remark #34051: REGISTER ALLOCATION : [ApplyStencil] stencil.c:3

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   31[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     111
            Global    :      35
            Local     :      76
        Regenerable   :       5
        Spilled       :      12
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      96 bytes*
            Reads     :      12 [1.55e+00 ~ 1.5%]
            Writes    :      12 [1.02e+00 ~ 1.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: CopyImage(unsigned char *, unsigned char *, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (CopyImage(unsigned char *, unsigned char *, int, int)) [2/2=100.0%] stencil.c(27,86)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at stencil.c(28,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stencil.c(30,3)
   <Peeled loop for vectorization>
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
      remark #25015: Estimate of max trip count of loop=15
   LOOP END

   LOOP BEGIN at stencil.c(30,3)
      remark #15388: vectorization support: reference img_in[i*width+j] has aligned access   [ stencil.c(31,4) ]
      remark #15388: vectorization support: reference img_out[i*width+j] has aligned access   [ stencil.c(31,26) ]
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 2.000
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 0.430 
      remark #15478: estimated potential speedup: 5.490 
      remark #15488: --- end vector cost summary ---
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   LOOP END

   LOOP BEGIN at stencil.c(30,3)
   <Alternate Alignment Vectorized Loop>
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   LOOP END

   LOOP BEGIN at stencil.c(30,3)
   <Remainder loop for vectorization>
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

stencil.c(27,86):remark #34051: REGISTER ALLOCATION : [CopyImage] stencil.c:27

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      44
            Global    :      24
            Local     :      20
        Regenerable   :       0
        Spilled       :       6
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       6 [1.16e+00 ~ 1.2%]
            Writes    :       6 [1.16e+00 ~ 1.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
